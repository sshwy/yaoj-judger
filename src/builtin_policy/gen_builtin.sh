#!/bin/bash

outname=../lib/builtin_policy.gen.c

files=()

# Process Substitution: http://mywiki.wooledge.org/ProcessSubstitution
# https://stackoverflow.com/questions/30988586/creating-an-array-from-a-text-file-in-bash
while read -r line; do
  files+=($line)
done < <(find . -type f -name '*.policy' && find . -type f -name '*.polib')

# The difference between "$@" and "$*":
# - "$@" expand each element as a separate argument.
# - "$*" expand to the arguments merged into one argument.
# If you need to get length of the array use symbol "#" before the name of array. 

# include headers
cat > $outname << EOF
// This file is generated by script and should not be modified
#include <stdlib.h>
#include <string.h>

#include "lib/policy.h"
EOF

# policy content
for file in ${files[@]}; do
  xxd -i $file >> $outname
done

printf "const unsigned int policy_num = ${#files[@]};\n" >> $outname

# policy list
cat >> $outname << EOF
struct builtin_policy * policy_list_get() {
  size_t block_size = policy_num * sizeof(struct builtin_policy);
  struct builtin_policy *p = malloc(block_size);
  struct builtin_policy policy_list[] = {
EOF

for file in ${files[@]}; do
  # https://www.gnu.org/software/sed/manual/sed.html
  var_name=$(sed -e 's/\.\|\\\|\//_/g' < <(echo $file))
  var_len="${var_name}_len"

  printf "\t\t{\"${file:2}\", ${var_name}, ${var_len}},\n" >> $outname
done

cat >> $outname << EOF
  };
  memcpy(p, policy_list, block_size);
  return p;
}
EOF
